import "jsr:@supabase/functions-js/edge-runtime.d.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.50.3';

/**
 * 🛠️ MANUAL CLIP FIX
 * 
 * Direct fix for the current session - manually connects to Vizard project 22680049
 * and pulls the clips into the session.
 */

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
};

Deno.serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('🛠️ Starting manual clip fix for session 9a395756-cb1f-482e-95d1-f14239462b78...');
    
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    const sessionId = '9a395756-cb1f-482e-95d1-f14239462b78';
    const vizardProjectId = '22680049';

    // Step 1: Get Vizard API key
    const vizardApiKey = Deno.env.get('VIZARDAI_API_KEY');
    if (!vizardApiKey) {
      throw new Error('VIZARDAI_API_KEY not configured');
    }

    console.log(`🎯 Fetching clips from Vizard project: ${vizardProjectId}`);

    // Step 2: Call Vizard API (using correct endpoint)
    const response = await fetch(`https://elb-api.vizard.ai/hvizard-server-front/open-api/v1/project/query/${vizardProjectId}`, {
      method: 'GET',
      headers: {
        'VIZARDAI_API_KEY': vizardApiKey,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Vizard API error: ${response.status} - ${errorText}`);
    }

    const result = await response.json();
    console.log(`📊 Vizard response code: ${result.code}`);

    if (result.code !== 2000) {
      throw new Error(`Vizard project not ready: ${result.msg || 'Unknown status'}`);
    }

    // Step 3: Transform clips
    const rawClips = result.videos || result.clips || [];
    console.log(`🎬 Found ${rawClips.length} raw clips`);

    const transformedClips = rawClips.map((clip: any, index: number) => ({
      id: clip.id || `vizard_clip_${vizardProjectId}_${index}`,
      title: clip.title || clip.headline || `AI Generated Clip ${index + 1}`,
      duration: clip.duration || 30,
      aspectRatio: '9:16',
      quality: '1080p',
      videoUrl: clip.videoUrl || clip.url || clip.downloadUrl || '',
      thumbnailUrl: clip.thumbnailUrl || clip.thumbnail || '',
      viralityScore: convertVizardScore(clip.score || clip.viralityScore || clip.rating),
      viralityReasoning: [
        'AI-selected viral moment with high engagement potential',
        clip.duration >= 30 && clip.duration <= 60 ? 'Optimal duration for social media' : '',
        'Generated by Vizard AI clipping algorithm'
      ].filter(Boolean).join('. '),
      transcript: clip.transcript || clip.subtitle || '',
      suggestedCaption: clip.caption || clip.description || '',
      suggestedHashtags: clip.hashtags || [],
      status: 'ready',
      eventName: '',
      speakerName: '',
      createdAt: new Date().toISOString(),
      processedAt: new Date().toISOString()
    }));

    console.log(`✨ Transformed ${transformedClips.length} clips`);

    // Step 4: Update session with clips
    const { data: currentSession } = await supabase
      .from('user_sessions')
      .select('session_data')
      .eq('id', sessionId)
      .single();

    const updatedSessionData = {
      ...(currentSession?.session_data || {}),
      video_clips: transformedClips
    };

    const { error: updateError } = await supabase
      .from('user_sessions')
      .update({
        video_processing_job_id: vizardProjectId,
        video_processing_status: 'completed',
        session_data: updatedSessionData
      })
      .eq('id', sessionId);

    if (updateError) {
      throw new Error(`Failed to update session: ${updateError.message}`);
    }

    // Step 5: Also save to video_clips table
    const clipsToInsert = transformedClips.map(clip => ({
      id: clip.id,
      session_id: sessionId,
      title: clip.title,
      duration: clip.duration,
      video_url: clip.videoUrl,
      thumbnail_url: clip.thumbnailUrl,
      virality_score: clip.viralityScore,
      transcript: clip.transcript,
      status: 'ready',
      created_at: new Date().toISOString()
    }));

    const { error: clipsError } = await supabase
      .from('video_clips')
      .upsert(clipsToInsert, { onConflict: 'id' });

    if (clipsError) {
      console.warn('Failed to insert to video_clips table:', clipsError);
    }

    console.log(`✅ Successfully fixed session with ${transformedClips.length} clips!`);

    return new Response(JSON.stringify({
      success: true,
      message: `Successfully retrieved and saved ${transformedClips.length} clips from Vizard`,
      clips: transformedClips,
      sessionId: sessionId,
      vizardProjectId: vizardProjectId
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });

  } catch (error) {
    console.error('💥 Manual fix error:', error);
    return new Response(JSON.stringify({
      success: false,
      error: error.message,
      debug: error.stack
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }
});